/*----------------------------------------------------------------------*/
/*---------------------------- UNCLASSIFIED ----------------------------*/
/*----------------------------------------------------------------------*/


/*----------------------------------------------------------------------*/
/*----------------------------- DESCRIPTION ----------------------------*/
/*----------------------------------------------------------------------*/


/*----------------------------------------------------------------------*/
/*------------------------------ INCLUDES ------------------------------*/
/*----------------------------------------------------------------------*/
#include "ImaginaryClass.h"


/*----------------------------------------------------------------------*/
/*------------------------ FORWARD DECLARATIONS ------------------------*/
/*----------------------------------------------------------------------*/


/*----------------------------------------------------------------------*/
/*------------------------------- USINGS -------------------------------*/
/*----------------------------------------------------------------------*/
namespace A {
namespace B {
namespace C {
namespace D {


/*----------------------------------------------------------------------*/
/*-------------------------- GLOBAL VARIABLES --------------------------*/
/*----------------------------------------------------------------------*/


/*----------------------------------------------------------------------*/
/*----------------------- CONSTRUCTOR/DESTRUCTOR -----------------------*/
/*----------------------------------------------------------------------*/
//When trying to get all the variables for the constructor, it helps to do this :
//  1) Get all variables of very specific types. A variable contains a list of say, only bools.
//  2) Define a default value for each very specific type
ImaginaryClass::ImaginaryClass (OTHERCLASS* pointer) :
  DefinitelyRealSuper(),
  //bools
  myBool(false),
  //chars
  myChar('\0'),
  //unsigneds
  myUnsigned(0),
  myUnsignedChar(0),
  myUnsignedShort(0),
  myUnsignedInt(0),
  myUnsignedLong(0),
  //shorts
  myShort(0),
  //ints
  myInt(0),
  //ulongs and longs
  myULong(0),
  myLong(0),
  //floats
  myFloat(0.0),
  //doubles
  myDouble(0.0),
  //strings
  myString(""),
  //references
  myReference(0),
  //pointers
  myPointer(NULL),
  //objects
  myObject(),
  //bool arrays
  myBoolArray({false}),
  //char arrays
  myCharArray({'\0'}),
  //unsigned arrays
  myUnsignedArray({0}),
  //short arrays
  myShortArray({0}),
  //int arrays
  //ulong and long arrays
  //float arrays
  //double arrays
  //string arrays
  //reference arrays
  //pointer arrays
  //object arrays
{

}


/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
ImaginaryClass::~ImaginaryClass ()
{
  if (NULL != myPointer) { delete myPointer; }
  myPointer = NULL;
}


/*----------------------------------------------------------------------*/
/*------------------------------ FUNCTIONS -----------------------------*/
/*----------------------------------------------------------------------*/
bool ImaginaryClass::changeObjectName (const std::string& identifier)
{

}


/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
double ImaginaryClass::changeObjectValue (const double& newValue, int valueWeWontUse)
{

}


/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
const std::string& ImaginaryClass::getObjectName () const
{

}


/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
const double& ImaginaryClass::getObjectValue () const
{

}


/*----------------------------------------------------------------------*/
/*------------------------------ OPERATORS -----------------------------*/
/*----------------------------------------------------------------------*/
// I haven't gotten to testing on operators yet, leave this for the future


/*----------------------------------------------------------------------*/
/*------------------------------ TEMPLATES -----------------------------*/
/*----------------------------------------------------------------------*/
// I haven't gotten to testing on templates yet, leave this for the future


/*----------------------------------------------------------------------*/
/*------------------------- CLOSING NAMESPACES -------------------------*/
/*----------------------------------------------------------------------*/
} //end namespace D
} //end namespace C
} //end namespace B
} //end namespace A


/*----------------------------------------------------------------------*/
/*---------------------------- UNCLASSIFIED ----------------------------*/
/*----------------------------------------------------------------------*/