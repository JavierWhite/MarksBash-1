/*----------------------------------------------------------------------*/
/*---------------------------- UNCLASSIFIED ----------------------------*/
/*----------------------------------------------------------------------*/

/*----------------------------------------------------------------------*/
/*----------------------------- DESCRIPTION ----------------------------*/
/*----------------------------------------------------------------------*/ 

/*----------------------------------------------------------------------*/
/*------------------------------ INCLUDES ------------------------------*/
/*----------------------------------------------------------------------*/ 

#include <include1.h>
#include <include2.h>
#include <string>
#include "projectHeader1.h"
#include "projectHeader2.h"
#include "projectHeader3.h"
/*----------------------------------------------------------------------*/
/*------------------------ FORWARD DECLARATIONS ------------------------*/
/*----------------------------------------------------------------------*/ 

/*----------------------------------------------------------------------*/
/*------------------------------- USINGS -------------------------------*/
/*----------------------------------------------------------------------*/ 

namespace A {
namespace B {
namespace C {
namespace D {
/*----------------------------------------------------------------------*/
/*-------------------------- GLOBAL VARIABLES --------------------------*/
/*----------------------------------------------------------------------*/ 

/*----------------------------------------------------------------------*/
/*----------------------- CONSTRUCTOR/DESTRUCTOR -----------------------*/
/*----------------------------------------------------------------------*/ 

ImaginaryClass::ImaginaryClass (OTHERCLASS* pointer) : 
{ 
  DefinitelyRealSuper(),
  //bool
  myBool(false),
  //char
  myChar('\0'),
  //unsigned
  myUnsigned(0),
  myUnsignedChar(0),
  myUnsignedShort(0),
  myUnsignedInt(0),
  myUnsignedLong(0),
  //short
  myShort(0),
  //int
  myInt(0),
  //long
  myULong(0),
  myLong(0),
  //float
  myFloat(0.0),
  //double
  myDouble(0.0),
  //std::string
  myString(''),
  //OTHERCLASS&
  myReference(0),
  //OTHERCLASS*
  myPointer(NULL),
  //OTHERCLASS
  myObject(),
  //bool
  myBoolArray({false}),
  //char
  myCharArray({'\0'}),
  //short
  myShortArray({0}),
  //unsigned
  myUnsignedArray({0}),


}
/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
ImaginaryClass::~ImaginaryClass ()
{ 
  if (NULL != myPointer) {delete myPointer;} 
  myPointer = NULL; 
 }
/*----------------------------------------------------------------------*/
/*------------------------------ FUNCTIONS -----------------------------*/
/*----------------------------------------------------------------------*/ 

bool ImaginaryClass::changeObjectName (const std::string& identifier) 
{ 

}
/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
double ImaginaryClass::changeObjectValue(const double& newValue, int valueWeWontUse) 
{ 

}
/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
const std::string& ImaginaryClass::getObjectName() const 
{ 

}
/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
const double& ImaginaryClass::getObjectValue () const 
{ 

}
/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/
// More function can be added here and so on
/*----------------------------------------------------------------------*/
/*------------------------------ OPERATORS -----------------------------*/
/*----------------------------------------------------------------------*/ 

//this part will handle the operators just we are just leaving it for now
/*----------------------------------------------------------------------*/
/*------------------------------ TEMPLATES -----------------------------*/
/*----------------------------------------------------------------------*/ 

//this part will handle the Templates however we are just leavin it for now
/*----------------------------------------------------------------------*/
/*------------------------- CLOSING NAMESPACES -------------------------*/
/*----------------------------------------------------------------------*/ 

} //end of namespace D 
} //end of namespace C 
} //end of namespace B 
} //end of namespace A 
/*----------------------------------------------------------------------*/
/*---------------------------- UNCLASSIFIED ----------------------------*/
/*----------------------------------------------------------------------*/ 

